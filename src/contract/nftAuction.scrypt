import "nftAuctionProto.scrypt";
import "nftProto.scrypt";
import "rabinUtil.scrypt";

contract NftAuction {

  public function unlock(
    SigHashPreimage txPreimage,
    bytes nftScript,
    int nftOutputSatoshis,
    int preFeeAmount,
    int preTimestamp,
    int preBsvBidPrice,
    Ripemd160 preBidder,
    Ripemd160 changeAddress,
    int changeSatoshis,
    bytes opReturnScript,
    bytes timeRabinMsg,
    bytes timeRabinSig,
    bytes timeRabinPadding,
    bytes timeRabinPubKey,

    bytes rabinMsg,
    bytes[RabinUtil.ORACLE_VERIFY_NUM] rabinPaddingArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinSigArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinPubKeyIndexArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinPubKeyVerifyArray,
    bytes rabinPubKeyHashArray,

    PubKey senderPubKey, // only cancel need
    Sig senderSig // only cancel need
  ) {
    SigHashType sigHashType = SigHash.ALL | SigHash.ANYONECANPAY | SigHash.FORKID;
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    bytes auctionScript = Util.scriptCode(txPreimage);
    int auctionScriptLen = len(auctionScript);

    require(hash160(timeRabinPubKey) == NftAuctionProto.getTimeRabinPubkeyHash(auctionScript,auctionScriptLen));
    int _timestamp = RabinUtil.getOracleTime(timeRabinMsg,timeRabinSig,timeRabinPadding,timeRabinPubKey);
    require(_timestamp > Util.fromLEUnsigned(NftAuctionProto.getEndTimestamp(auctionScript,auctionScriptLen)));

    bytes sensibleID = NftAuctionProto.getSensibleID(auctionScript, auctionScriptLen);

    bytes thisOutpoint = Util.outpoint(txPreimage);

    bytes rabinPubKeyHashArrayHash = NftAuctionProto.getRabinPubkeyHashArrayHash(auctionScript,auctionScriptLen);
    RabinUtil.verifyRabinPubKey(rabinPubKeyHashArrayHash,rabinPubKeyHashArray, rabinPubKeyVerifyArray, rabinPubKeyIndexArray);

    RabinUtil.verifyRabinMsg(rabinPubKeyVerifyArray, rabinMsg, rabinPaddingArray, rabinSigArray);

    PayloadU4SpendByData pl = RabinUtil.loadPayloadU4SpendBy(rabinMsg);
    bytes preAuctionScript = NftAuctionProto.getNewBidScript(auctionScript,auctionScriptLen,preFeeAmount,preTimestamp,preBsvBidPrice,preBidder,sensibleID);

    require(pl.byTxId == thisOutpoint[ : 32]);
    require(pl.outpoint==sensibleID || hash160(preAuctionScript) == pl.scriptHash);

    int nftScriptLen = len(nftScript);

    int lastBsvBidPrice = Util.fromLEUnsigned(NftAuctionProto.getBidBsvPrice(auctionScript, auctionScriptLen));
    bytes lastBidder = NftAuctionProto.getBidderAddress(auctionScript, auctionScriptLen);
    bytes senderAddress =  NftAuctionProto.getSenderAddress(auctionScript,auctionScriptLen);

    bytes outputs = b'';
    if (lastBidder == NftAuctionProto.NULL_ADDRESS){
      // check sig
      require(hash160(senderPubKey) == senderAddress);
      require(checkSig(senderSig, senderPubKey));
      
      bytes outputScript = NftProto.getNewNftScript(nftScript, nftScriptLen, senderAddress);
      outputs = Util.buildOutput(outputScript, nftOutputSatoshis);

    }else {
      bytes newNftScript = NftProto.getNewNftScript(nftScript, nftScriptLen, lastBidder);
      bytes nftOutput = Util.buildOutput(newNftScript, nftOutputSatoshis);

      bytes collectionScript = Util.buildPublicKeyHashScript(Ripemd160(senderAddress));
      bytes collectionOutput = Util.buildOutput(collectionScript, lastBsvBidPrice);
      outputs = nftOutput + collectionOutput;
    }

    bytes feeAddress = NftAuctionProto.getFeeAddress(auctionScript,auctionScriptLen);
    int feeAmount = Util.fromLEUnsigned(NftAuctionProto.getFeeAmount(auctionScript,auctionScriptLen));
    bytes feeScript = Util.buildPublicKeyHashScript(Ripemd160(feeAddress));
    bytes feeOutput = Util.buildOutput(feeScript, feeAmount);

    bytes opReturnOutput = b'';
    if (len(opReturnScript) > 0) {
      require(opReturnScript[: 2] == b'006a');
      opReturnOutput = Util.buildOutput(opReturnScript, 0);
    }

    bytes changeOutput = b'';
    if (changeSatoshis > 0) {
      bytes changeScript = Util.buildPublicKeyHashScript(changeAddress);
      changeOutput = Util.buildOutput(changeScript, changeSatoshis);
    }

    bytes hashOutput = hash256(outputs + feeOutput + opReturnOutput + changeOutput);
    require(hashOutput == Util.hashOutputs(txPreimage));
  }

  public function bid(
    SigHashPreimage txPreimage,
    int bidTimestamp,
    int bsvBidPrice,
    Ripemd160 bidder,
    int preBidTimestamp,
    int preBsvBidPrice,
    Ripemd160 preBidder,
    Ripemd160 changeAddress,
    int changeSatoshis,
    bytes opReturnScript,
    bytes timeRabinMsg,
    bytes timeRabinSig,
    bytes timeRabinPadding,
    bytes timeRabinPubKey,

    bytes rabinMsg,
    bytes[RabinUtil.ORACLE_VERIFY_NUM] rabinPaddingArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinSigArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinPubKeyIndexArray,
    int[RabinUtil.ORACLE_VERIFY_NUM] rabinPubKeyVerifyArray,
    bytes rabinPubKeyHashArray
  ){
    SigHashType sigHashType = SigHash.ALL | SigHash.ANYONECANPAY | SigHash.FORKID;
    require(Util.checkPreimageSigHashType(txPreimage, sigHashType));

    bytes auctionScript = Util.scriptCode(txPreimage);
    int auctionScriptLen = len(auctionScript);

    require(hash160(timeRabinPubKey) == NftAuctionProto.getTimeRabinPubkeyHash(auctionScript,auctionScriptLen));

    int _timestamp = RabinUtil.getOracleTime(timeRabinMsg,timeRabinSig,timeRabinPadding,timeRabinPubKey);
    require(bidTimestamp == _timestamp);
    int endTimeStamp = Util.fromLEUnsigned(NftAuctionProto.getEndTimestamp(auctionScript,auctionScriptLen));
    int lastBidTimestamp = Util.fromLEUnsigned(NftAuctionProto.getBidTimestamp(auctionScript,auctionScriptLen));
    require(bidTimestamp < endTimeStamp);
    require(bidTimestamp > lastBidTimestamp);

    bytes sensibleID = NftAuctionProto.getSensibleID(auctionScript, auctionScriptLen);
    bytes bidderAddress = NftAuctionProto.getBidderAddress(auctionScript, auctionScriptLen);
    bool isFirst = false;
    if (bidderAddress == NftAuctionProto.NULL_ADDRESS) {
      isFirst = true;
    }
    require(NftAuctionProto.checkProtoHeader(auctionScript, auctionScriptLen));
    // check opreturn
    require(NftAuctionProto.checkDataLen(auctionScript, auctionScriptLen));
    require(NftAuctionProto.checkOpReturn(auctionScript, auctionScriptLen));

    bytes rabinPubKeyHashArrayHash = NftAuctionProto.getRabinPubkeyHashArrayHash(auctionScript,auctionScriptLen);
    RabinUtil.verifyRabinPubKey(rabinPubKeyHashArrayHash,rabinPubKeyHashArray, rabinPubKeyVerifyArray, rabinPubKeyIndexArray);

    RabinUtil.verifyRabinMsg(rabinPubKeyVerifyArray, rabinMsg, rabinPaddingArray, rabinSigArray);

    PayloadU4SpendByData pl = RabinUtil.loadPayloadU4SpendBy(rabinMsg);
    bytes thisOutpoint = Util.outpoint(txPreimage);

    int divFeeRate = 20;
    int preFeeAmount = preBsvBidPrice / divFeeRate;
    bytes preAuctionScript = NftAuctionProto.getNewBidScript(auctionScript,auctionScriptLen,preFeeAmount,preBidTimestamp,preBsvBidPrice,preBidder,sensibleID);

    require(pl.byTxId == thisOutpoint[ : 32]);
    require(pl.outpoint==sensibleID || hash160(preAuctionScript) == pl.scriptHash);

    bytes refunOutput = b'';
    if (!isFirst) {
      bytes lastBidder = NftAuctionProto.getBidderAddress(auctionScript, auctionScriptLen);
      int lastBidPrice = Util.fromLEUnsigned(NftAuctionProto.getBidBsvPrice(auctionScript, auctionScriptLen));
      require(bsvBidPrice > lastBidPrice);

      int lastFeeAmount = Util.fromLEUnsigned(NftAuctionProto.getFeeAmount(auctionScript, auctionScriptLen));
      bytes refunOutputScript = Util.buildPublicKeyHashScript(Ripemd160(lastBidder));
      refunOutput = Util.buildOutput(refunOutputScript, lastBidPrice + lastFeeAmount);
    }
    else {
      require(bsvBidPrice >= Util.fromLEUnsigned(NftAuctionProto.getStartBsvPrice(auctionScript,auctionScriptLen)));
    }
    int feeAmount = bsvBidPrice / divFeeRate;
    bytes newAuctionScript = NftAuctionProto.getNewBidScript(auctionScript, auctionScriptLen,feeAmount,bidTimestamp, bsvBidPrice, bidder, sensibleID);
    bytes auctionOuput = Util.buildOutput(newAuctionScript, bsvBidPrice + feeAmount);

    bytes opReturnOutput = b'';
    if (len(opReturnScript) > 0) {
      require(opReturnScript[: 2] == b'006a');
      opReturnOutput = Util.buildOutput(opReturnScript, 0);
    }

    bytes changeOutput = b'';
    if (changeSatoshis > 0) {
      bytes changeScript = Util.buildPublicKeyHashScript(changeAddress);
      changeOutput = Util.buildOutput(changeScript, changeSatoshis);
    }

    bytes outputs = auctionOuput + refunOutput + opReturnOutput + changeOutput;
    bytes hashOutput = hash256(outputs);
    require(hashOutput == Util.hashOutputs(txPreimage));
  }
}